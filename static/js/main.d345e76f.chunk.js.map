{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["formReducer","state","event","name","value","App","useReducer","formData","setFormData","useState","submitting","setSubmitting","handleChange","target","className","Object","entries","map","toString","onSubmit","preventDefault","setTimeout","onChange","placeholder","type","step","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAEMA,EAAc,SAACC,EAAOC,GAC3B,OAAO,2BACFD,GADL,kBAEGC,EAAMC,KAAOD,EAAME,SA4ERC,MAxEf,WACE,MAAgCC,qBAAWN,EAAa,IAAxD,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWMC,EAAe,SAAAV,GACnBM,EAAY,CACVL,KAAMD,EAAMW,OAAOV,KACnBC,MAAOF,EAAMW,OAAOT,SAKzB,OACC,sBAAKU,UAAU,UAAf,UACE,oBAAIA,UAAU,MAAd,SAAoB,oDACnBJ,GACC,sBAAKI,UAAU,gBAAf,8CAEE,6BACGC,OAAOC,QAAQT,GAAUU,KAAI,mCAAEd,EAAF,KAAQC,EAAR,YAC5B,+BAAe,iCAASD,IAAxB,KAAyCC,EAAMc,aAAtCf,WAKjB,uBAAMgB,SA9Ba,SAAAjB,GACnBA,EAAMkB,iBACNT,GAAc,GAEdU,YAAW,WACTV,GAAc,KACb,MAwBH,UACE,mCACE,kCACE,2CACA,uBAAOG,UAAU,OAAOX,KAAK,YAAYmB,SAAUV,EAAcW,YAAY,4BAC7E,0CACA,uBAAOT,UAAU,OAAOX,KAAK,WAAWmB,SAAUV,EAAcW,YAAY,2BAC5E,sCACA,uBAAOT,UAAU,OAAOX,KAAK,SAASmB,SAAUV,EAAcW,YAAY,4BAG9E,qCACC,kCACE,wCACA,yBAAQT,UAAU,OAAOX,KAAK,WAAWmB,SAAUV,EAAnD,UACI,wBAAQR,MAAM,GAAd,yCACA,wBAAQA,MAAM,KAAd,qCACA,wBAAQA,MAAM,KAAd,yBACA,wBAAQA,MAAM,KAAd,oBACA,wBAAQA,MAAM,QAAd,yBAGN,kCACE,mDACA,uBAAOU,UAAU,OAAOU,KAAK,SAASrB,KAAK,UAAUmB,SAAUV,EAAca,KAAK,SAEpF,gCACE,4CACA,uBAAOD,KAAK,WAAWrB,KAAK,cAAcmB,SAAUV,YAIvD,wBAAQc,MAAO,SAASF,KAAK,SAA7B,2BC/DSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d345e76f.chunk.js","sourcesContent":["import React, { useReducer, useState } from 'react';\nimport './App.css';\nconst formReducer = (state, event) => {\n return {\n   ...state,\n   [event.name]: event.value\n }\n}\n\nfunction App() {\n  const [formData, setFormData] = useReducer(formReducer, {});\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setSubmitting(true);\n\n    setTimeout(() => {\n      setSubmitting(false);\n    }, 3000);\n  }\n\n  const handleChange = event => {\n    setFormData({\n      name: event.target.name,\n      value: event.target.value,\n    });\n  }\n\n\n return(\n  <div className=\"wrapper\">\n    <h1 className=\"col\"><b>Registration Form</b></h1>\n    {submitting &&\n      <div className=\"wrapperSubmit\">\n        You are submitting the following:\n        <ul>\n          {Object.entries(formData).map(([name, value]) => (\n            <li key={name}><strong>{name}</strong>: {value.toString()}</li>\n          ))}\n        </ul>\n      </div>\n    }\n    <form onSubmit={handleSubmit}>\n      <fieldset>\n        <label>\n          <p>First Name</p>\n          <input className=\"font\" name=\"FirstName\" onChange={handleChange} placeholder=\"Enter your First Name..\"/>\n          <p>Last Name</p>\n          <input className=\"font\" name=\"LastName\" onChange={handleChange} placeholder=\"Enter your Last Name..\"/>\n          <p>Email</p>\n          <input className=\"font\" name=\"Email:\" onChange={handleChange} placeholder=\"Enter your Email..\"/>\n        </label>\n      </fieldset>\n      <fieldset>\n       <label>\n         <p>Subject</p>\n         <select className=\"font\" name=\"Subject:\" onChange={handleChange}>\n             <option value=\"\">--Please choose an option--</option>\n             <option value=\"ai\">Artificial Intelligence</option>\n             <option value=\"dm\">Data Mining</option>\n             <option value=\"py\">Python</option>\n             <option value=\"react\">REACT</option>\n         </select>\n       </label>\n       <label>\n         <p>Number of Courses:</p>\n         <input className=\"font\" type=\"number\" name=\"Number:\" onChange={handleChange} step=\"1\"/>\n       </label>\n       <label>\n         <p>Remember Me\n         <input type=\"checkbox\" name=\"Remember Me\" onChange={handleChange} />\n         </p>\n       </label>\n     </fieldset >\n      <button class =\"button\" type=\"submit\">Submit</button>\n    </form>\n  </div>\n)\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}